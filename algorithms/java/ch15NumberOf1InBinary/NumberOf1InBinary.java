package ch15NumberOf1InBinary;

// Source : https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/
// Author : cornprincess
// Date   : 2021-03-07

/***************************************************************************************************** 
 *
 * 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 
 * 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
 *
 * 示例 1：
 *
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 *
 * 示例 2：
 *
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 *
 * 示例 3：
 *
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 * 提示：
 *
 * 	输入必须是长度为 32 的 二进制串 。
 *
 * 注意：本题与主站 191 题相同：https://leetcode-cn.com/problems/number-of-1-bits/
 ******************************************************************************************************/

public class NumberOf1InBinary {
    public int hammingWeight(int n) {
        // 常规解法
        int sum = 0;
        int t = 1;
        for (int i = 0; i < 32; i++) {
            if ((t & n) == t) {
                sum++;
            }
            t = t << 1;
        }
        return sum;
    }

    // core 这是另一种思路，不移动指针，而移动数字，这样可以一直用1来进行计算
    public int hammingWeight2(int n) {
        // 常规解法
        int sum = 0;
        while (n != 0) {
            sum += n & 1;
            // core 这里一定要用无符号右移
            n = n >>> 1;
        }
        return sum;
    }

    // core 巧用 n & (n - 1)
    public int hammingWeight3(int n) {
        /*
         * core n有几个1就循环几次，次方法最佳
         *  n & (n - 1) 的作用为消去 n 最右边的1
         *  n:           1111 1000
         *  n-1:         1111 0111
         *  n & (n - 1): 1111 0000
         */
        int res = 0;
        while (n != 0) {
            res++;
            n = n & (n - 1);
        }
        return res;
    }
}

